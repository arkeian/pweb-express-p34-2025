generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String
  password   String
  email      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relasi
  orders     Order[]
}

enum BookCondition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
  POOR
}

model Genre {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?

  books      Book[]

  @@map("genres")
}

model Book {
  id              String    @id @default(uuid())
  title           String    @unique
  writer          String
  publisher       String
  isbn            String?
  description     String?
  publicationYear Int?
  condition       BookCondition @default(NEW)
  price           Int
  stockQuantity   Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?

  genreId         String
  genre           Genre     @relation(fields: [genreId], references: [id])

  orderItems      OrderItem[]

  @@index([genreId])
  @@map("books")
}

model Order {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Foreign key
  userId     String
  user       User      @relation(fields: [userId], references: [id])

  // Relasi ke order_items
  items      OrderItem[]
}

model OrderItem {
  id         String    @id @default(uuid())
  quantity   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Foreign keys
  orderId    String
  order      Order     @relation(fields: [orderId], references: [id])

  bookId     String
  book       Book      @relation(fields: [bookId], references: [id])
}
