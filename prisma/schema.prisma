generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String
  password     String
  email        String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  orders       Order[]
  transactions Transaction[]

  @@map("users")
}

enum BookCondition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  ACCEPTABLE
  POOR
}

model Genre {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?

  books       Book[]

  @@unique([name, deletedAt])
  @@map("genres")
}

model Book {
  id              String    @id @default(uuid())
  title           String
  writer          String
  publisher       String
  isbn            String?   @unique
  description     String?
  publicationYear Int?
  condition       BookCondition @default(NEW)
  price           Int
  stockQuantity   Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?

  genreId         String
  genre           Genre     @relation(fields: [genreId], references: [id])

  orderItems      OrderItem[]
  transactionItems TransactionItem[]

  @@index([genreId])
  @@unique([title, writer, publisher, deletedAt])
  @@map("books")
}

model Order {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  userId     String
  user       User      @relation(fields: [userId], references: [id])

  items      OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String    @id @default(uuid())
  quantity   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  orderId    String
  order      Order     @relation(fields: [orderId], references: [id])

  bookId     String
  book       Book      @relation(fields: [bookId], references: [id])

  // Prevent duplicate book per order
  @@unique([orderId, bookId])

  @@map("order_items")
}

model Transaction {
  id           String             @id @default(uuid())
  userId       String
  user         User               @relation(fields: [userId], references: [id])
  totalAmount  Int                
  createdAt    DateTime           @default(now())
  items        TransactionItem[]

  @@map("transactions")
}

model TransactionItem {
  id             String       @id @default(uuid())
  transactionId  String
  transaction    Transaction  @relation(fields: [transactionId], references: [id])
  bookId         String
  book           Book         @relation(fields: [bookId], references: [id])
  quantity       Int
  price          Int

  @@map("transaction_items")
}
